close
clear
clc

% Deep Learning and System Identification , Ljung , Andersson, Tiels , Schon

addpath 'C:\Users\afons\OneDrive - Universidade de Lisboa\Controlo de Plataforma Sismica\NN_System_Identification\dados_elcentro'
data=load("TDOF_PassFD_ElCentro_s1_70_V0.mat");


sname=fieldnames(data);
time=eval(['data.',sname{1},'.X.Data']);
dt=mean(diff(time));
xgr=eval(['data.',sname{1},'.Y(6).Data'])*1e-3; % referencia
xg=eval(['data.',sname{1},'.Y(5).Data'])*1e-3; %posicao da mesa
ag=eval(['data.',sname{1},'.Y(1).Data']); %aceleraçao na mesa
ag_corrected = ag - mean(ag);

% Step 2: Double integrate the corrected acceleration
velocity = cumtrapz(t, ag_corrected); % Single integration for velocity
displacement = cumtrapz(t, velocity); % Double integration for displacement

% Step 3: Check residual displacement
final_displacement = displacement(end); % Residual displacement at the end

% Step 4: Adjust offset iteratively (if needed)
% Define optimization function to minimize final displacement
cost_function = @(offset) abs(cumtrapz(t, cumtrapz(t, ag - offset))(end));

% Use fminsearch to find the optimal offset
optimal_offset = fminsearch(cost_function, mean(acc));

% Apply the optimal offset
acc_corrected = acc - optimal_offset;

% Recompute displacement with corrected acceleration
velocity = cumtrapz(t, acc_corrected);
displacement = cumtrapz(t, velocity);

%%  MATLAB script to splice the beginning and end of a signal where values are almost constant

signal = xgr ;
n = length(signal);
t = 1:n; % Time or index vector

% Parameters to detect constant regions
window_size = 10; % Size of the moving window
threshold = 0.0001; % Threshold for detecting constant values (tolerance for variation)

% Calculate the local standard deviation of the signal
local_std = movstd(signal, window_size);

% Identify constant regions (where local standard deviation is below the threshold)
constant_regions = local_std < threshold;

% Find the indices for the beginning and end constant regions
start_index = find(~constant_regions, 1, 'first'); % First non-constant index
end_index = find(~constant_regions, 1, 'last'); % Last non-constant index

% Splice the signal to remove the constant regions at the beginning and end
spliced_signal = signal(start_index:end_index);

% Plot the results
figure;
subplot(3, 1, 1);
hold on
plot(t, signal);
title('Original Signal');
xlabel('Time'); ylabel('Amplitude');
xline(start_index, '-r', 'Start');
xline(end_index, '-r', 'End');
xlim([0 t(end)])

subplot(3, 1, 2);
hold on
plot(t, local_std);
title('Local Standard Deviation');
xlabel('Time'); ylabel('Std Dev');
yline(threshold, '--m', 'Threshold');
xline(start_index, '-r', 'Start');
xline(end_index, '-r', 'End');
xlim([0 t(end)])

subplot(3, 1, 3);
hold on
new_t = t(start_index:end_index);
plot(new_t, spliced_signal);
xline(start_index, '-r', 'Start');
xline(end_index, '-r', 'End');
title('Spliced Signal');
xlabel('Time'); ylabel('Amplitude');
xlim([0 t(end)])


% Double integration of ag to get displacement
velocity = cumtrapz(time(start_index:end_index), ag(start_index:end_index));       % First integration (velocity)
displacement = cumtrapz(time(start_index:end_index), velocity); % Second integration (displacement)

% Plotting all signals on the same plot
figure;
hold on;
plot(time(start_index:end_index), xgr(start_index:end_index), 'LineWidth', 1.5, 'DisplayName', 'Reference Signal (xgr)');
plot(time(start_index:end_index), displacement, 'LineWidth', 1.5, 'DisplayName', 'Displacement (from ag)');
plot(time(start_index:end_index), xg(start_index:end_index), 'LineWidth', 1.5, 'DisplayName', 'Position Signal (xg)');
plot(time(start_index:end_index), velocity, 'LineWidth', 1.5, 'DisplayName', 'Velocity (from ag)');
%plot(time(start_index:end_index), ag(start_index:end_index))

% Add labels, legend, and grid
title('Signals Over Time');
xlabel('Time (s)');
ylabel('Amplitude');
legend show;
grid on;


%% Modelo inverso
% Modelo determina referencia a partir de sinal sismico & mediçoes na mesa

% inputs: 
U = [ ddx(start_index:end_index)     ]; % sinal sismico(k-1) & mediçao na mesa(k+1)
siz = size(U)
Num_I= siz(2)
% outputs:  
Y = [ ag(start_index:end_index) ]; % referencia(k) ( no treino é igual ao sismo(k) )
siz = size(Y)
Num_O= siz(2)

%%
% sample time of dt seconds.
data = iddata( Y , U , dt ) 
idplot(data)

%%  Power Spectral Density

% inputSignal = data.u; % Input signal
% outputSignal = data.y; % Output signal
% Fs = 1 / data.Ts; % Sampling frequency
% 
% % Plot PSD for input signal
% figure;
% subplot(2, 1, 1);
% pspectrum(inputSignal, Fs, 'power');
% title('Power Spectral Density of Input Signals');
% 
% % Plot PSD for output signal
% subplot(2, 1, 2);
% pspectrum(outputSignal, Fs, 'power');
% title('Power Spectral Density of Output Signals');


%% Deep Cascade Network
net=cascadeforwardnet([6,6,6,6,6,6])
N2=neuralnet(net)

%%
N_A = 10*ones(Num_O)
N_B = 10*ones(Num_O,Num_I)
N_K = ones(Num_O,Num_I)

% opt = nlarxOptions
% opt.SearchOptions.MaxIterations = 10
mN2=nlarx(data,[N_A N_B N_K ],N2)

%% Compare
figure
compare(data(1:1500),mN2)







